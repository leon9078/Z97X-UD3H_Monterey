Entire BIOS mod guide

Complete list of edits:
1) Update the default 88:88:88:88:87:88 MAC address to my specific one (74:D4:35:ED:EB:FC)
2) Update Intel ME from 9.1.25.1005 to 9.1.40.1000
3) Update the module after "MERecoveryDxe" to include updated first 512KiB of SPI into it
4) Update with UBU tool:
   - Intel GOP driver + OPROM
   - Intel LAN driver + OPROM
   - CPU microcodes
5) Change Setup, AMITSE and NVRAM to enable "ACPI Debug"
6) Delete 2 Microcode GUID ffs (fake, and last of the duplicates one)
7) Delete 2 "Padding file" sections, by adjusting Attributes
8) Replace AMI's "FileSystem" driver with "Fat" (EnhancedFatDxe from FatPkg audk [fork of EDK II project focused on security])
9) Add "HfsPlus" driver

Prerequisites:
- Clean install of Windows 10 version 1607 or higher
- Internet connection

We will work entirely in the Documents folder

We need this files/softwares:
1) Mullvad Browser latest for Windows [x64] (https://github.com/mullvad/mullvad-browser/releases/latest)
2) Microsoft Visual C++ Redistributable Version latest [x86] [x64] (https://aka.ms/vs/17/release/vc_redist.x86.exe) (https://aka.ms/vs/17/release/vc_redist.x64.exe)
3) Python latest for Windows [x64] (https://www.python.org/)
4) 7-Zip latest for Windows [x64] (https://www.7-zip.org/)
5) Notepad++ latest Installer [x64] (https://github.com/notepad-plus-plus/notepad-plus-plus/releases/latest)
6) Hextor latest (https://github.com/digitalw0lf/hextor/releases/latest)
7) HfsPlus latest from acidanthera/OcBinaryData (https://github.com/acidanthera/OcBinaryData)
8) Original latest BIOS from OEM website (F10b, Fix memory compatibility) (https://www.gigabyte.com/Motherboard/GA-Z97X-UD3H-rev-10/support)
9) UEFITool NE latest for Windows [x64] (https://github.com/LongSoft/UEFITool/releases/latest)
10) IFRExtractor RS latest for Windows [x86] (https://github.com/LongSoft/IFRExtractor-RS/releases/latest)
11) My OpenCore fork (Darwin XCODE5) (which add Fat.efi) (https://github.com/leon9078/OpenCorePkg/releases/latest)
12) My OpenCore fork (Windows VS2019) (which add GenSec.exe and LzmaCompress.exe) (https://github.com/leon9078/OpenCorePkg/releases/latest)



Click on "Start" icon > select "Windows System" folder > select "Command Prompt"
Right click on "Command Prompt" icon > select "Pin to taskbar"
Click on "Command Prompt" icon, then run:
> cd Documents
> curl -LO https://github.com/mullvad/mullvad-browser/releases/download/14.5/mullvad-browser-windows-x86_64-14.5.exe
> curl -LO https://aka.ms/vs/17/release/vc_redist.x86.exe
> curl -LO https://aka.ms/vs/17/release/vc_redist.x64.exe
> curl -LO https://www.python.org/ftp/python/3.13.3/python-3.13.3-amd64.exe
> curl -LO https://www.7-zip.org/a/7z2409-x64.exe
> curl -LO https://github.com/notepad-plus-plus/notepad-plus-plus/releases/download/v8.7.9/npp.8.7.9.Installer.x64.exe
> curl -LO https://github.com/digitalw0lf/hextor/releases/download/v0.14/HextorSetup.exe
> curl -LO https://github.com/acidanthera/OcBinaryData/raw/refs/heads/master/Drivers/HfsPlus.efi
> curl -LO https://download.gigabyte.com/FileList/BIOS/mb_bios_ga-z97x-ud3h_f10b.zip
> curl -LO https://github.com/LongSoft/UEFITool/releases/download/A71/UEFITool_NE_A71_win64.zip
> curl -LO https://github.com/LongSoft/IFRExtractor-RS/releases/download/v1.6.0/ifrextractor_1.6.0_win32.zip
> curl -LO https://github.com/leon9078/OpenCorePkg/releases/download/1.0.5/OpenCore-1.0.5-Darwin-XCODE5-RELEASE.zip
> curl -LO https://github.com/leon9078/OpenCorePkg/releases/download/1.0.5/OpenCore-1.0.5-Windows-VS2019-RELEASE.zip

Click on "Start" icon > select "Documents"
Click twice on "Date modified"

Open "mullvad-browser-windows-x86_64-14.5.exe"
"Installation type" > Select "Advanced"
Next >
Uncheck "Add desktop icon"
Next >
Install

Right click on "Mullvad Browser" icon > select "Pin to taskbar"
Click on "Change Language..."
Set the language to "English (en-US)"
Uncheck "Check your spelling as you type"
Save files to > "Browse..." > select "Documents" folder > Select Folder
Uncheck "Always ask you where to save files"

Scroll down a bit, "What should Mullvad Browser do with other files?" > select "Save files"

In the search bar type: "about:config"
Click on "Accept the Risk and Continue"
Search for "browser.download.enable_spam_prevention" and set it to "false"

Quit Mullvad Browser, then open it again

Download remaining files through the browser:

- MMTool 5.02.0024 Mod (https://www.mediafire.com/file/t5w592roapx6wzl/MMTool_Aptio_5.02.0024_Mod.7z/file)
- Intel ME System Tools v9.1 (https://mega.nz/folder/qdVAyDSB#FLCPaDVIsPYiy2TAUjD7RQ/file/fUVnlaQQ)
- Intel ME v9.1 1.5MB (https://mega.nz/folder/2Q0klQpA#6o04nlV_4xqfx76tjvgi4g/file/2FdiiAIS)
- UBU v1.80 b1 (https://mega.nz/folder/lLg2GLrA#SnZZd0WjHkULFHg7FESm8g/file/AapTmTBC)
- Intel VBIOS and BSF r3 (https://mega.nz/folder/lLg2GLrA#SnZZd0WjHkULFHg7FESm8g/file/VeYEWICB)
- CloneVBT (https://mega.nz/folder/lLg2GLrA#SnZZd0WjHkULFHg7FESm8g/file/4SBG1ChI)

Quit Mullvad Browser



Click on "Start" icon > select "Windows Accessories" folder > select "Notepad"
Right click on "Notepad" icon > select "Pin to taskbar"
Click on "Notepad" icon, then paste this text:

@echo off
>tmp.txt echo(FF FE 7B 00 0D 00 0A 00 20 00 22 00 42 00 79 00 74 00 65 00 43 00 6F 00 6C 00 75 00 6D 00 6E 00 73 00 22 00 3A 00 20 00 31 00 36 00 0D 00 0A 00 7D 00
certutil -f -decodehex tmp.txt %USERPROFILE%\AppData\Local\Hextor\Editor.json >nul
del tmp.txt

File > Save > Save as type: All Files (*.*) > File name: "Editor.bat" > [select Documents folder] > Save



Then, always in Notepad
File > New Window

Paste this text:

@echo off
>tmp.txt echo(FF FE 7B 00 0D 00 0A 00 20 00 22 00 52 00 69 00 67 00 68 00 74 00 50 00 61 00 6E 00 65 00 6C 00 57 00 69 00 64 00 74 00 68 00 22 00 3A 00 20 00 31 00 32 00 38 00 30 00 0D 00 0A 00 7D 00
certutil -f -decodehex tmp.txt %USERPROFILE%\AppData\Local\Hextor\MainForm.json >nul
del tmp.txt

File > Save > Save as type: All Files (*.*) > File name: "MainForm.bat" > [select Documents folder] > Save



Then, always in Notepad
File > New Window

Paste this text:

@echo off
>tmp.txt echo(FF FE 7B 00 0D 00 0A 00 20 00 22 00 43 00 68 00 65 00 63 00 6B 00 49 00 6E 00 74 00 65 00 72 00 76 00 61 00 6C 00 22 00 3A 00 20 00 30 00 0D 00 0A 00 7D 00
certutil -f -decodehex tmp.txt %USERPROFILE%\AppData\Local\Hextor\Updater.json >nul
del tmp.txt

File > Save > Save as type: All Files (*.*) > File name: "Updater.bat" > [select Documents folder] > Save

Close all Notepad windows





Back to CMD
> mkdir ..\AppData\Local\Hextor
> Editor.bat
> MainForm.bat
> Updater.bat
> del Editor.bat MainForm.bat Updater.bat



Back to File Explorer, press F5 to refresh the new downloaded files

Right click on "vc_redist.x86.exe" > "Run as administrator" > "Yes"
Check "I agree to the license terms and conditions"
Install
Close



Right click on "vc_redist.x64.exe" > "Run as administrator" > "Yes"
Check "I agree to the license terms and conditions"
Install
Close





Right click on "python-3.13.3-amd64.exe" > "Run as administrator" > "Yes"
Check "Use admin privileges when installing py.exe"
Check "Add python.exe to PATH"

Click on "Customize installation"
Next
Check "Install Python 3.13 for all users"
Install

Click on "Disable path length limit"
Close



Right click on "7z2409-x64.exe" > "Run as administrator" > "Yes"
Install
Close



Right click on "npp.8.7.9.Installer.x64.exe" > "Run as administrator" > "Yes"
(English is fine, otherwise choose your language)
OK
Next >
I Agree
Next >
Next >
Install
Uncheck "Run Notepad++ v8.7.9"
Finish



Right click on "HextorSetup.exe" > "Run as administrator" > "Yes"
Select "Install for all users (recommended)"
Select "I accept the agreement"
Next >
Next >
Uncheck "Create a desktop shortcut"
Next >
Install
Uncheck "Launch Hextor"
Finish





Click on "Start" icon > select "Notepad++"
Right click on "Notepad++" icon > select "Pin to taskbar"
Right click on "Notepad++" icon > right click on "Notepad++" > select "Properties"
Start in: "%USERPROFILE%\Documents" > Apply > OK
Quit Notepad++, then open it again.



I'm going to change some default settings in Notepad++:

Settings > Preferences...

General
    "Enable pin tab feature" NO

Editing 1
    "Enable scrolling beyond last line" NO
    "Enable Copy/Cut Line without selection" NO

Margins/Border/Edge
    "Line Number" > Display > "Constant width"
    "Change History" > "Show in the margin" NO

Recent Files History
    "Recent Files History" > "Max. number of entries:" > 0

Backup
    "Remember current session for next launch" NO

Auto-Completion
    "Enable auto-completion on each input" NO

Multi-Instance & Date
    "Multi-instance settings > "Always in multi-instance mode"

Cloud & Link
    "Clickable Link Settings" > "Enable" NO

MISC.
    "Document Switcher (Ctrl+TAB)" > "Enable" NO
    "Enable Notepad++ auto-updater" NO

Close
Plugins > Plugins Admin... > Scroll down a bit and check "ComparePlus" > Install > Yes > Yes
Quit Notepad++



Click on "Start" icon > select "Hextor"
Right click on "Hextor" icon > select "Pin to taskbar"
Quit Hextor



Select with Shift modifier:
"mb_bios_ga-z97x-ud3h_f10b.zip"
"UEFITool_NE_A71_win64.zip"
"ifrextractor_1.6.0_win32.zip"
"MMTool_Aptio_5.02.0024_Mod.7z"
"ME System Tools v9.1 r7.rar"
"ME 9.1 1.5MB v9.1.40.1000.rar"

and with all this files selected (6) > 7-Zip > Extract Here

Right click on "OpenCore-1.0.5-Darwin-XCODE5-RELEASE.zip" > 7-Zip > Extract to "OpenCore-1.0.5-Darwin-XCODE5-RELEASE\"
Right click on "OpenCore-1.0.5-Windows-VS2019-RELEASE.zip" > 7-Zip > Extract to "OpenCore-1.0.5-Windows-VS2019-RELEASE\"
Right click on "UBU_v1_80_b1.rar" > 7-Zip > Extract to "UBU_v1_80_b1\"
Right click on "Intel_VBIOS_and_BSF_r3.7z" > 7-Zip > Extract to "Intel_VBIOS_and_BSF_r3\"





Let's begin!

The idea of creating a custom BIOS file started because I was fed up with my specific Intel LAN MAC address (74:D4:35:ED:EB:FC) being "reset" to the default (88:88:88:88:87:88) every time I flashed the original OEM BIOS file using fpt (Intel Flash Programming Tool) without any additional parameter
In a bootable USB DOS environment, this command will flash the entire BIOS image including the GbE region with the wrong (default) MAC address:
> fpt -f Z97XUD3H.10b

To avoid replacing my specific MAC address, I need to specify an additional parameter, "-savemac" or "-bios"

1) fpt -savemac -f Z97XUD3H.10b    #This will prevent the MAC address from being overwritten
or
2) fpt -bios -f Z97XUD3H.10b       #This will flash the BIOS region only



Back to CMD
> del autoexec.bat Efiflash.exe


Open Hextor
File > Open > "Z97XUD3H.10b" > Open
Search > Go To address... > 0x1000 > OK
Type this HEX sequence: "74 D4 35 ED EB FC"
File > Save as... > "74D435EDEBFC.fd" > Save
File > Exit

Make sure the BIOS file extension is ".fd" for 3 reasons:
1) Official EDK II Build specification "Firmware Device Images" (https://github.com/tianocore-docs/edk2-BuildSpecification/blob/release/1.28/10_post-build_imagegen_stage_-_flash/README.md#1001-imagegen-file-extensions)
2) AMI MMTool use this file extension for their Aptio firmware
3) Apple use this file extension in their firmware





Now, let's update Intel ME in BIOS

Back to CMD
> move "Intel ME Firmware v9.1.40.1000 (1.5MB)\9.1.40.1000_1.5MB_PRD_EXTR.bin" .
> rmdir "Intel ME Firmware v9.1.40.1000 (1.5MB)"

Open Hextor
File > Open > "9.1.40.1000_1.5MB_PRD_EXTR.bin" > Open
Edit > Select all
Edit > Copy
File > Open > "74D435EDEBFC.fd" > Open
Search > Go To address: 0x3000 > OK
Edit > Paste
File > Save as... > "Updated_ME_unconfigured.fd" > Save
File > Exit



Back to CMD
> del 9.1.40.1000_1.5MB_PRD_EXTR.bin 74D435EDEBFC.fd
> move Updated_ME_unconfigured.fd "Intel ME System Tools v9.1 r7\Flash Image Tool\WIN32"
> explorer "Intel ME System Tools v9.1 r7\Flash Image Tool\WIN32"



Open "fitc.exe"
Check "I accept the license agreement" > OK
Expand the window to Full Screen

File > Open... > All files (*.*) > "Updated_ME_unconfigured.fd" > Open

Build > Build Settings...
Uncheck "Generate intermediate build files" > OK
In the top section change from "Intel(R) H81 - Desktop" to "Intel(R) Z97 - Desktop"

ME Region > Configuration > ME > WLAN Power Well Config: 0x86
ME Region > Configuration > Integrated Clock Controller [right click > Add Profile > Overclocking]
ME Region > Configuration > Integrated Clock Controller > ICC Profile 0 - UserProfile [right click > Remove Profile > Yes]
Profile Name/Description: Full_OCProfile
PCI and Flex Clock Settings > Flex Clock Source Selection: FLEX1 Source Clock: 2: 48/24MHz
PCI and Flex Clock Settings > Flex Clock Source Selection: FLEX2 Source Clock: 2: 48/24MHz
Clock Range Definition Records > DMI Clock Source Range Limits > Min Nominal Frequency: 45.000000MHz
Clock Range Definition Records > DMI Clock Source Range Limits > SSC Spread Percentage: 0.50%
Clock Range Definition Records > PCIe Clock Source Range Limits > Min Nominal Frequency: 100.000000MHz

ME Region > Configuration > Integrated Clock Controller [right click > Add Profile > Overclocking]
Profile Name/Description: PEG_OCProfile
PCI and Flex Clock Settings > Flex Clock Source Selection: FLEX1 Source Clock: 2: 48/24MHz
PCI and Flex Clock Settings > Flex Clock Source Selection: FLEX2 Source Clock: 2: 48/24MHz
DMI and PCIe Clock Settings > Differential Clock Source Selection > PEGA Source Clock: 1:100MHzBCLK
DMI and PCIe Clock Settings > Differential Clock Source Selection > PEGB Source Clock: 1:100MHzBCLK
Clock Range Definition Records > DMI Clock Source Range Limits > Min Nominal Frequency: 45.000000MHz
Clock Range Definition Records > DMI Clock Source Range Limits > SSC Spread Percentage: 0.50%
Clock Range Definition Records > PCIe Clock Source Range Limits > Min Nominal Frequency: 100.000000MHz

ME Region > Configuration > Integrated Clock Controller [right click > Add Profile > Standard]
PCI and Flex Clock Settings > Flex Clock Source Selection: FLEX1 Source Clock: 2: 48/24MHz
PCI and Flex Clock Settings > Flex Clock Source Selection: FLEX2 Source Clock: 2: 48/24MHz

File > Save As... > "config" > Save
File > Exit

Right click on "config.xml" > "Edit with Notepad++"
Search > Replace... > Find what: "1324" > Replace with: "3214" > Replace All

[Replace All: 1 occurrence was replace in entire file]

Find what: "0x00800000" > Replace with: "0x00600000" > Replace All

[Replace All: 1 occurrence was replace in entire file]

Close Replace window

File > Save
File > Exit



Back to CMD
> move "Intel ME System Tools v9.1 r7\Flash Image Tool\WIN32\Updated_ME_unconfigured\Decomp\BIOS Region.bin" .



Open Hextor
File > Open > "BIOS Region.bin" > Open
Edit > Select Range... > Range end: 0x200000 > Select
Hit the Insert key, then Del key, then Insert key again
File > Save
File > Exit

Back to CMD
> move "BIOS Region.bin" "Intel ME System Tools v9.1 r7\Flash Image Tool\WIN32\Updated_ME_unconfigured\Decomp\"


Back to File Explorer > WIN32 folder
Open again "fitc.exe"
File > Open... > "config.xml" > Open
Build > Build Image
WARNING "Are you sure you want to choose the Boot Guard Profile: "Boot Guard Profile 0 - No_FVME" for this build?" > "Yes"
File > Exit

Our new BIOS image will be inside Build\ folder named "outimage.bin"

Close WIN32 window in File Explorer



Back to CMD
> move "Intel ME System Tools v9.1 r7\Flash Image Tool\WIN32\Build\outimage.bin" .
> rmdir /s /q "Intel ME System Tools v9.1 r7"



Back to File Explorer
Open UEFITool.exe
File > Open image file... > "outimage.bin" > Open
Action > Search... > Hex pattern > "888888888788" > Header and body > OK

There will be 1 result inside an unknown GUID/.../Raw section!

So we changed our MAC address from the default 88:88:88:88:87:88 to our custom one (74:D4:35:ED:EB:FC), so why do we have another one here?!
That's because Gigabyte seems to add the initial 512KiB of the SPI (in my case Descriptor region + GbE region + ME region cut) into this ffs module (maybe for recovery purposes?)
Here are some references (post 21 through 25): https://winraid.level1techs.com/t/intel-cs-me-cs-txe-cs-sps-gsc-pmc-pchc-phy-orom-firmware-repositories/30869

Double click on the only one result, it will select "Raw section".
Right click on "Raw section" > Extract body... > [default name is fine] > Save

Open Hextor
File > Open > "Z97XUD3H.10b" > Open
Edit > Select Range... > Range end: 0x80000 > Select
File > Save selection as... > "Original_first_512KiB_SPI.bin" > Save
File > Exit

Now let's compare the SHA-256 of the two files:

Back to File Explorer
Right click on "Section_Raw_821D110C-D0A3-4CF7-AEF3-E28088491704_body.bin" > 7-Zip > CRC SHA > SHA-256
Right click on "Original_first_512KiB_SPI.bin" > 7-Zip > CRC SHA > SHA-256

We will have exactly the same result!!!


Back to CMD

> del Section_Raw_821D110C-D0A3-4CF7-AEF3-E28088491704_body.bin Original_first_512KiB_SPI.bin Z97XUD3H.10b

So now we want to update this module with our updated data (which, in my case, include updated GbE MAC address and updated ME)

But first let's check some important stuff

Back to UEFITool
Click above on "Compressed section" and check "Compression algorithm", it says "None". We can extract the module "As is".
There are usually different types of compression algorithms for section files (https://github.com/LongSoft/UEFITool/blob/A71/common/basetypes.h#L130-L140)
If we have a module with a "Compression algorithm" different than "None", we need to uncompress with a specific tool.

Click on "821D110C-D0A3-4CF7-AEF3-E28088491704" and take note of the following info:
- File GUID: 821D110C-D0A3-4CF7-AEF3-E28088491704
- Attributes: 00h
- Data checksum: AAh, valid



We have to find the section type and ffs type, so we can use that info later.

File Types: https://github.com/LongSoft/UEFITool/blob/A71/common/ffs.cpp#L282-L297
Section Types: https://github.com/LongSoft/UEFITool/blob/A71/common/ffs.cpp#L305-L321

In UEFITool check the "Subtype" value of the "File" type, it says "Freeform"
Double check on the link above the result: EFI_FV_FILETYPE_FREEFORM
Now go down, check the "Subtype" value of the "Section" type, it says "Compressed"
Double check on the link above the result: EFI_SECTION_COMPRESSION
And so on, till the end of the module.



In (https://github.com/LongSoft/UEFITool/blob/A71/common/ffs.h#L328-L335)
"FFS_ATTRIB_CHECKSUM" is bit 6h (0x40)

In (https://uefi.org/specs/PI/1.9/V3_Code_Definitions.html#efi-ffs-file-header)
"If the FFS_ATTRIB_CHECKSUM bit of the Attributes field is cleared to zero, the IntegrityCheck.Checksum.File field must be initialized with a value of 0xAA."
Our "Attributes" does not have the Data Checksum bit set (0x40), indeed it has a value of 0xAA.

Quit UEFITool



Open Hextor
File > Open > "outimage.bin" > Open
Edit > Select Range... > Range end: 0x80000 > Select
File > Save selection as... > "Updated_512KiB.bin" > Save
File > Exit

Now back to CMD
> move OpenCore-1.0.5-Windows-VS2019-RELEASE\Utilities\BaseTools\GenSec.exe .
> move OpenCore-1.0.5-Windows-VS2019-RELEASE\Utilities\BaseTools\GenFfs.exe .
> move OpenCore-1.0.5-Windows-VS2019-RELEASE\Utilities\BaseTools\LzmaCompress.exe .
> rmdir /s /q OpenCore-1.0.5-Windows-VS2019-RELEASE
> GenSec -o Updated_512KiB.raw -s EFI_SECTION_RAW Updated_512KiB.bin
> GenSec -o Updated_512KiB.com -s EFI_SECTION_COMPRESSION -c PI_NONE Updated_512KiB.raw
> GenFfs -o Updated_512KiB.ffs -t EFI_FV_FILETYPE_FREEFORM -g "821D110C-D0A3-4CF7-AEF3-E28088491704" -i Updated_512KiB.com
> del Updated_512KiB.com Updated_512KiB.raw Updated_512KiB.bin


So we have our new "Updated_512KiB.ffs" file that we will use later to replace the old one!





Now I want to update:
- Intel GOP driver and OPROM
- Intel LAN driver and OPROM
- CPU microcodes

To do so, I will use the fantastic UBU (UEFI BIOS Updater) tool!

Reference guide: https://winraid.level1techs.com/t/guide-transfer-of-specific-intel-orom-vbios-and-gop-vbt-settings-by-using-intel-bmp-tool/30930



> move Intel_VBIOS_and_BSF_r3\HSWBDW\1044\hsw_1044.dat .
> rmdir /s /q Intel_VBIOS_and_BSF_r3
> start /b /min /wait MMTool outimage.bin /e /l myvbios.dat 8086 0402
> CloneVBT myvbios.dat hsw_1044.dat
> del myvbios.dat hsw_1044.dat
> move cln_vbios.bin UBU_v1_80_b1\Files\intel\VBIOS\vbioshsw.dat
> copy MMTool.exe UBU_v1_80_b1\mmtool_a4.exe
> move outimage.bin UBU_v1_80_b1\bios.bin
> powershell -Command "Start-Process cmd -ArgumentList """/K cd $(get-location)\UBU_v1_80_b1""" -Verb RunAs"
> pip3 install colorama pltable
> UBU.cmd

Select option 1 (Use MMTool - as in UBU v1.6x)
Select option 2 (Video OnBoard)
Select option 1 (Replace GOP Driver)
Select option 2 (Replace OROM VBIOS)
Select option 0 (Return to Main Menu)
Select option 3 (Network)
Select option 1 (Replace Intel)
Select option 2 (only 1 or 2 chips i210/i211/i350 or other possible combinations)
Select option 0 (Return to Main Menu)
Select option 5 (CPU MicroCode)
Select option F (Find and Replace from MCUpdate.txt)
Select option R (Start replacement)
Select option 0 (Exit)
Select option 0 (Exit)
Select option 1 (Rename to mod_bios.bin)

> exit
> move UBU_v1_80_b1\mod_bios.bin .
> rmdir /s /q UBU_v1_80_b1

We successfully updated:
- Intel GOP driver + OPROM
- Intel LAN driver + OPROM
- CPU microcodes





Now, I wanted to fix this ACPI issue I have in DSDT:

    External (MDBG, IntObj)

    Method (ADBG, 1, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            Return (MDBG) /* External reference */
            Arg0
        }

        Return (Zero)
    }

MDBG is recognized as a "IntObj" which is wrong. It is a "MethodObj", since it contains Arg0 in the Return!
This happens because there is a missing ACPI table which is not loaded at runtime
So I tried to search inside UEFITool if there is an ACPI table which has this Method and I found it!

Back to File Explorer
Open UEFITool.exe
File > Open image file... > "mod_bios.bin" > Open
Action > Search... > Text > "MDBG", uncheck "Unicode", check "Case sensitive" > OK

There are 3 results, 2 inside AmiBoardInfo/.../PE32 image section (DSDT). 1 inside an unknown GUID/.../Raw section. If we double click on it, right click on "Raw section" > Body hex view... we see it's a SSDT!

So we know there is this ACPI table inside the BIOS. We need to find a way to activate this SSDT at runtime. The only way is by searching for a hidden BIOS setting
Let's try with the IFR extractor to find hidden BIOS settings

Back to UEFITool
File > Open image file... > "mod_bios.bin" > Open

Search for a known BIOS setting like: "XHCI Mode". (Refer to the GIGABYTE user manual => Chapter 2: BIOS Setup => Peripherals)

Action > Search... > Text > "XHCI Mode", check "Unicode", check "Case sensitive" > OK

There will be 1 result inside Setup/.../MiniSetupResourceSection
Double click on it, it will select "MiniSetupResourceSection"
Click on "Compressed section" first, check on the right "Compression algorithm", it says "LZMA". We need to uncompress the module.
Then click on "Setup" and check on the right:
- File GUID: 899407D7-99FE-43D8-9A21-79EC328CAC21"
- Attributes: 40h
- Data checksum: CEh, valid

Back to CMD
> start /b /min /wait MMTool mod_bios.bin /ec 899407D7-99FE-43D8-9A21-79EC328CAC21 Setup.ffs





We need to extract just the LZMA (compressed section) from the entire FFS file.

Back to UEFITool
Click again on "Compressed section"
Check on the right:
- "LZMA dictionary size: 800000h"
- "Body size: 6F635h (456245)"



As per LZMA specification (https://sourceforge.net/projects/sevenzip/files/LZMA%20SDK/lzma1900.7z/download) => "lzma1900\DOC\lzma-specification.txt" => "lzma file format layout"
Dictionary size is at offset 1h and is a 32-bit unsigned integer, little endian
Our dictionary size: 800000h
80 00 00 # split into two digits
00 80 00 00 # dictionary size is 4 byte size, add a leading zero
00 00 80 00 # convert the result to little endian (swap the bytes from right to left)

Open Hextor
File > Open > "Setup.ffs" > Open
Search > Find/Replace... > "?? 00 00 80 00" > HEX > Extended syntax > List > Search pattern found 1 time(s) > OK => Find next >> => << Find prev
Close Find/Replace window

Edit > Select Range... > Range end: +0x6F635 > Select
File > Save selection as... > "Setup.lzma" > Save
File > Exit

Back to CMD
> LzmaCompress -d -o Setup_Uncompressed.bin Setup.lzma
> del Setup.lzma



Back to UEFITool
Click on "MiniSetupResourceSection", right click "Hex view...", select the first 16 HEX bytes from offset 00000000, Ctrl+C, close the window

Open Hextor
File > Open > "Setup_Uncompressed.bin" > Open
Search > Find/Replace... > Ctrl+V > HEX > Find next >> > << Find prev
Close Find/Replace window


Back to UEFITool
Check on the right "Full size: 3466DFh (3434207)"

Back to Hextor
Edit > Select range... > Range end: +0x3466DF > Select
File > Save selection as... > "Setup_MiniSetupResourceSection.sec" > Save


Back to CMD
> ifrextractor Setup_MiniSetupResourceSection.sec verbose
Now we need to search for something descriptive inside those *.txt files (like "mdbg", "adbg" or "debug")

Open Notepad++
Search > Find in Files...
Find what: ADBG
Replace with: [empty]
Filters: *.txt
Directory: > ... > Select Documents folder > Select Folder
Match case: uncheck
Search Mode: Normal

Find All

There is 1 result in 1 text file!
Double click on it.

0x34081A:                OneOf Prompt: "ACPI Debug", Help: "Open a memory buffer for storing debug strings.Use method ADBG to write strings to buffer.", [...] QuestionId: 0x325, VarStoreId: 0x1, VarOffset: 0x6F8, [...] { 05 A6 4E 0F 4F 0F 25 03 [...] }
0x340840:                        OneOfOption Option: "Disabled" Value: 0, Default, MfgDefault { 09 0E 04 00 30 00 00 00 00 00 00 00 00 00 }
0x34084E:                        OneOfOption Option: "Enabled" Value: 1 { 09 0E 03 00 00 00 01 00 00 00 00 00 00 00 }
0x34085C:                End  { 29 02 }

So this is a hidden BIOS setting that will enable that SSDT in the ACPI stack and remove the DSDT decompile error!

Now, before going on, I will reference some guides I found online that explain how to edit BIOS default settings, special thanks to user Lost_N_BIOS!
(https://winraid.level1techs.com/t/determine-configurable-aperture-size-from-bios-file/34246/5) => "There is three ways a BIOS can pull a default setting value, in Setup [...], or AMITSE/SetupData, or NVRAM."
(https://winraid.level1techs.com/t/request-maximus-xi-hero-unlock-amibcp/33743/4) => "[...] there is three main possible places to change them to enabled/disabled [...] Those are setup module, AMITSE/SetupData module (This is what AMIBCP changes), and finally NVRAM."
(https://winraid.level1techs.com/t/request-maximus-xi-hero-unlock-amibcp/33743/8) => "(NVRAM and all it's possible locations, Setup Module, AMITSE/SetupData)"

We already found the Setup module above. I will explain how to make the edit, then proceed to search for AMITSE/SetupData and NVRAM locations!



Copy the HEX sequence between curly braces in "OneOf Prompt" line

Back to Hextor

Search > Find/Replace > Ctrl-V => Find next >> => << Find prev => Find next >>
Close Find/Replace window
Search > Go To address... > +0x4 > OK
Type "00"
Search > Go To address... > +0xD > OK
Type "30"
File > Save as... > "Setup_Uncompressed_ACPI_Debug.bin" > Save
File > Exit


Back to CMD
> del Setup_Uncompressed.bin
> LzmaCompress -e -o Setup_ACPI_Debug.lzma d 23 Setup_Uncompressed_ACPI_Debug.bin
> del Setup_Uncompressed_ACPI_Debug.bin
> GenSec -o Setup_ACPI_Debug.com -s EFI_SECTION_COMPRESSION -c PI_NONE Setup_ACPI_Debug.lzma

Open Hextor
File > Open > "Setup_ACPI_Debug.com" > Open
Search > Go To address... > 0x8
Type "02"
File > Save
File > Exit



Back to UEFITool
Click on "DXE dependency section", right click "Hex view...", select the first 16 HEX bytes from offset 00000000, Ctrl+C, close the window


Open Hextor again
File > Open > "Setup.ffs" > Open
Search > Find/Replace > Ctrl-V > HEX > Find next >> > << Find prev
Close Find/Replace window

Back to UEFITool
Check on the right: "Full size: 16h (22)"

Back to Hextor
Edit > Select Range... > Range end: +0x16 > Select



File > Save selection as... > "Setup.dpx" > Save
File > Exit


Back to CMD
> GenFfs -o Setup_ACPI_Debug.ffs -t EFI_FV_FILETYPE_DRIVER -g "899407D7-99FE-43D8-9A21-79EC328CAC21" -s -i Setup.dpx -i Setup_ACPI_Debug.com
> del Setup.dpx Setup_ACPI_Debug.com Setup_ACPI_Debug.lzma Setup.ffs


File "Setup_ACPI_Debug.ffs" will be used later!





Now we need to find AMITSE/SetupData. This section is what AMIBCP tool changes. We will change the equivalent of AMIBCP's Failsafe and Optimal value defaults
(https://winraid.level1techs.com/t/msi-z490-unify-bios-mod/35975/44) => "Here, I will try to explain [...] about AMITSE/SerupData edit, you use "QuestionID" backwards (little endian), to find area to edit,
then [...], in the long string for setting, after 05 D1 for example, next four bytes are Label ID and Help Label ID, these two sets of bytes will always be after/near the correct location of the QuestionID you find to edit."


This module has a signature at the beginning of the file "$SPF"
(https://winraid.level1techs.com/t/request-how-to-access-locked-hidden-bios-menu-settings/32688/224) => "AMITSESetupData module ($SPF signature at the beginning of the file)"



Back to UEFITool
File > Open image file... > "mod_bios.bin" > Open
Action > Search... > Text > "$SPF", uncheck "Unicode", check "Case sensitive" > OK

There will be 1 result inside AMITSE/.../setupdata.

Double click on it, it will select "setupdata"
Click on "Compressed section" above, check on the right "Compression algorithm", it says "None". We don't have to uncompress it!
Select "AMITSE" above, and check on the right:
- File GUID: B1DA0ADF-4F77-4070-A88E-BFFE1C60529A
- Attributes: 40h
- Data checksum: CEh, valid

Attribute bit set (0x40) AND Data checksum value different than AA. So we know we have to calculate file checksum for this module, this info is useful later

Back to CMD
> start /b /min /wait MMTool mod_bios.bin /ec B1DA0ADF-4F77-4070-A88E-BFFE1C60529A AMITSE.ffs



Open Hextor
File > Open > "AMITSE.ffs" > Open

Now we need to find where are the 2 HEX bytes to change. Remember, we want to change "ACPI Debug" from "Disabled" to "Enabled" in both Failsafe and Optimal value

Back to Notepad++
Inside "Setup_MiniSetupResourceSection.sec.1.0.en-US.ifr.txt" file where we previously found the ACPI Debug setting. Here we are interested in 3 elements:
1) QuestionId
2) Label ID
3) Help Label ID

QuestionId value is 0x325
To find "Label ID" and "Help Label ID" we need to go at the end of the line, where inside the curly brackets there is the HEX representation of that specific setting (OneOf Prompt: "ACPI Debug")
{ 05 A6 4E 0F 4F 0F 25 03 ... }
Label ID is the 2 bytes at offset 2-3h: 4E 0F
Help Label ID is the 2 bytes at offset 4-5h: 4F 0F

As we can notice, the first byte of "Help Label ID" is ALWAYS one value more than the "Label ID" one. 4F > 4E

Now we need to create our Find sequence in Hextor in order to find our 2 HEX bytes to flip from 00 (Disabled) to 01 (Enabled)

So, we start with the QuestionId value in little endian (backwards). The initial value is 0x325. We want to pad the value with a leading zero to reach even digits, so 0x0325
Now we separate the digits, 0x03 0x25. Now Little Endian became 0x25 0x03

So, the initial (QuestionId) sequence to Find is: \x25\x03

Now there are next 18 HEX bytes to match, so we use "Extended syntax" feature in Hextor. The syntax will be: {byte::18}
Then there is "Help Label ID" value: \x4F\x0F
Then 26 HEX bytes to match, syntax in Hextor: {byte::26}
Then "Label ID" value: \x4E\x0F
Lastly, 2 HEX bytes to match. We can short the syntax: ??

So, the final sequence in Hextor is: \x25\x03{byte::18}\x4F\x0F{byte::26}\x4E\x0F??

Search > Find/Replace... > Find: "\x25\x03{byte::18}\x4F\x0F{byte::26}\x4E\x0F??" > Text > Extended syntax > List > Search pattern found 1 time(s) > OK => Find next >> => Find next >>

So we are clicking on it (Find next >>) twice to jump to the byte immediately after the selection
Close the Find/Replace window

Type "0101"

Now that we made this edit we have to recalculate the Data Checksum. As written above, the Data Checksum value is located inside ffs file header at offset 11h

So, in Hextor
Search > Go To address... > 0x11 > OK

Original value is 0xCE
We changed the Failsafe and Optimal value from 00 to 01
1) Failsafe HEX: 00 => 01 (+0x1)
2) Optimal HEX: 00 => 01 (+0x1)

So we added +0x2 HEX bytes
The final "Data checksum" value is: 0xCE - 0x2 = 0xCC

So, in Hextor
Edit > Select Range... > Range end: +0x1 > Select
Operations > Modify with expression > x-0x2 > OK


File > Save as... > "AMITSE_ACPI_Debug.ffs" > Save
File > Exit

Back to CMD
> del AMITSE.ffs

File "AMITSE_ACPI_Debug.ffs" will be used later!



Next, we need to modify NVRAM. As user Lost_N_BIOS noted, there are usually multiple locations to look at
The best way to found them is by searching a specific GUID (4599D26F-1A11-49B8-B91F-858745CFF824), which is AmiStandardDefaultsVariable

Back to UEFITool
File > Open image file... > "mod_bios.bin" > Open
Action > Search... > GUID > "4599D26F-1A11-49B8-B91F-858745CFF824" > Header and body > OK
There will be multiple results. We have to choose the ones that end with "/GUID store". There are 2 results:
1) NVRAM/GUID store
2) Defaults/.../GUID store

Double click on the first result. Let's start to analize it
As we can see the module does not have a "Compressed section" neither inside the module itself nor inside the Volume Index. So in this case we can simply skip the whole procedure of extracting the module with MMTool, modify, then replace it back.
We can directly make the NVRAM edit inside the full BIOS file without extra consequences!!!

Also, click on "NVRAM". Let's check this important info on the right:

Base: 200048h
Attributes: 00h
Data checksum: AAh, valid


We have to focus on finding the exact offset where "ACPI Debug" value resides in NVRAM

Back to Notepad++
Inside "Setup_MiniSetupResourceSection.sec.1.0.en-US.ifr.txt" file, go to the "ACPI Debug" line. This time search for:
- VarStoreId
- VarOffset

VarStoreId value is 0x1

Search > Incremental Search > Find: "VarStoreId: 0x1, Size"

In this line, we are interested in the following values:
- Name
- Size
- VarStore Guid

Name is "Setup"
Size is 0x753
VarStore Guid is "EC87D643-EBA4-4BB5-A1E5-3F3E36B20DA9"

We have to search for the NUL terminated name of the variable: "Setup\x00"
This is a mix of ASCII: "Setup" and HEX "0x0". UEFITool search engine does not support Extended syntax like Hextor, therefore we have to convert the entire ASCII string to HEX first
We can use this website (https://tomeko.net/online_tools/ascii.php?lang=en) to convert an ASCII string to HEX
ASCII: "Setup" => HEX: "5365747570"
Now we append the NUL terminated byte (\0) to the result: "536574757000"

So now, back in UEFITool
Action > Search... > Hex pattern > "536574757000" > Header and body > OK

There will be a bunch of results. We are interested in the NVRAM ones (first 3 results)
Double click each entry and look on the "Text" column. We need to find the only one that has "Setup" name, and on the right:
- Variable GUID: EC87D643-EBA4-4BB5-A1E5-3F3E36B20DA9
- Body size: 753h (1875)

It's the first entry!
Here we need:
- Base: 200077h
- Header size: 11h (17)

"Base" is the starting offset of the module since the beginning of the large BIOS file. We also need "Header size" to go to the beginning offset of the body. Remember, Body size: 753h!
So, 0x200077 + 0x11 = 0x200088



Open Hextor
File > Open > "mod_bios.bin" > Open
Search > Go To address... > 0x200088 > OK

Now we need the "ACPI Debug" VarOffset value

Back to Notepad++
Search > Incremental Search > Find: "ACPI Debug"

In that line copy the VarOffset value: 0x6F8

Quit Notepad++

Back to Hextor again
Search > Go to address... > +0x6F8 > OK
Type "01"
File > Save as... > "mod_bios_NVRAM_ACPI_Debug.fd" > Save
File > Exit



Back in CMD, run:
> del Setup_MiniSetupResourceSection.sec*



Ok, so we are done with the first of the two NVRAM locations!

Now we need to go to the second one, "Defaults"
In UEFITool, double click on the second result of "GUID pattern [...] Defaults/.../GUID store"
Click on "Compressed section" above. On the right "Compression algorithm: None". We can extract the module "As is"
Unlike the first result (NVRAM), this time the "Defaults" module resides in a Volume which has a "Compressed section" LZMA. So it's not possible to directly edit the whole BIOS file like before
We need to "Extract" with MMTool, make the edit, Replace
Click on "Defaults" and check on the right:
- File GUID: 9221315B-30BB-46B5-813E-1B1BF4712BD3
- Attributes: 40h
- Data checksum: 52h, valid

Inside CMD
> start /b /min /wait MMTool mod_bios_NVRAM_ACPI_Debug.fd /ec 9221315B-30BB-46B5-813E-1B1BF4712BD3 Defaults.ffs

Back in UEFITool, before working on making the actual edit, click on "Defaults", check again this important info on the right:

Attributes: 40h
Data checksum: 8Eh, valid

Open Hextor
File > Open > "Defaults.ffs" > Open

The module has the "Data checksum" bit (0x40) set, so we need to make the edit to the Data checksum later, after we edit the default value

Back in UEFITool, go to the "Search" tab. We are now interested in the 3 Defaults results in Hex pattern
As before, double click them until you found on the "Text" column "Setup" with this informations on the right:
- Variable GUID: EC87D643-EBA4-4BB5-A1E5-3F3E36B20DA9
- Body size: 753h (1875)

As before it's the 1st result!

Now, we need to calculate the offset to go later in Hextor. This time is a little bit difficult than before
We need to calculate the "Header size" sum of the sections above until main "Defaults" module
In other words, after we take note of the "Header size" up arrow, to go to the preceding section:

On the left (Structure tab) | On the right (Information tab)
EfiSetupVariableGuid        | Header size: 11h (17)
AmiStandardDefaultsVariable | Header size: 17h (23)
Raw section                 | Header size: 4h (4)
Compressed section          | Header size: 9h (9)
Defaults                    | Header size: 18h (24)

Now sum each "Header size": 0x11 + 0x17 + 0x4 + 0x9 + 0x18 = 0x4D

Quit UEFITool

Back in Hextor
Search > Go To address... > 0x4D > OK

We are at the beginning of the "Setup" body section (offset 0x0). We need to edit "ACPI Debug" from 00 (Disabled) to 01 (Enabled) which is at offset 0x6F8

Search > Go to address... > +0x6F8 > OK
Type "01"

Now we need to edit the "Data checksum", we added +0x1 to that offset, we need to remove -0x1 from original Data checksum
"Data checksum" is at byte 0x11. So:

Search > Go to address... > 0x11 > OK

Value is 0x8E

Edit > Select Range... > Range end: +0x1 > Select
Operations > Modify with expression > x-0x1 > OK
File > Save as... > "Defaults_ACPI_Debug.ffs" > Save
File > Exit

Back to CMD
> del Defaults.ffs mod_bios.bin

We are done with the second of the two NVRAM locations!





Now we want to delete 2 "Microcode" modules.
Back to File Explorer
Open UEFITool.exe
File > Open image file... > "mod_bios_NVRAM_ACPI_Debug.fd" > Open
Action > Search... > GUID > "17088572-377F-44EF-8F4E-B09FFF46A070" > Header only > OK

We have 3 results.
Double click on the first result. It is a fake module.
Indeed, right click on "Microcode" > "Body hex view...", it contains only FF. We can simply remove it.

Double click on 2nd and 3rd results. They are exactly the same modules. So we can remove one of them as well without any issues!

Quit UEFITool

Back to File Explorer
Open MMTool.exe
Load Image > "mod_bios_NVRAM_ACPI_Debug.fd" > Open
Delete > Volume Index: 02:01-00, File Index: 02 > Delete
Volume Index: 03, File Index: 02 > Delete
Save Image as... > "mod_bios_tmp" > Save
Close

Back to CMD
> del mod_bios_NVRAM_ACPI_Debug.fd





Now, we want to remove the "Padding file" sections from the BIOS.

Back to File Explorer
Open UEFITool.exe
File > Open image file... > "mod_bios_tmp" > Open

In the bottom section, under "Parser", there are 2 results.
Double click on each of them and take notes of the following informations on the right side:
- File GUID
- Attributes
- Data checksum

Both modules have Data checksum already initialized to the default value 0xAA, but 3rd bit (0x8) and 5th bit (0x20) set which is non valid per UEFI Platform Initialization Specification. Let's fix this issue!
We have to change Attributes value from 28 to 00

Quit UEFITool

Back to CMD
> start /b /min /wait MMTool mod_bios_tmp.fd /ec 2D27C618-7DCD-41F5-BB10-21166BE7E143 BiosAc.ffs



Open Hextor
File > Open > "BiosAc.ffs" > Open
Search > Go To address... > 0x13 > OK
Type "00"

Now we need to calculate the new "Header checksum". As always, we removed -0x28. Now we need to add +0x28 to that checksum value

Search > Go To address... > 0x10 > OK
Edit > Select Range... > Range end: +0x1 > Select
Operations > Modify with expression > x+0x28 > OK
File > Save as... > "BiosAc_fix.ffs" > Save
File > Exit



Back to CMD
> start /b /min /wait MMTool mod_bios_tmp.fd /ec D1E59F50-E8C3-4545-BF61-11F002233C97 TxtPeiAp.ffs



Open Hextor
File > Open > "TxtPeiAp.ffs" > Open
Search > Go To address... > 0x13 > OK
Type "00"

Now we need to calculate the new "Header checksum". As always, we removed -0x28. Now we need to add +0x28 to that checksum value

Search > Go To address... > 0x10 > OK
Edit > Select Range... > Range end: +0x1 > Select
Operations > Modify with expression > x+0x28 > OK
File > Save as... > "TxtPeiAp_fix.ffs" > Save
File > Exit





[Replace AMI FileSystem driver with EnhancedFatDxe]

Back to CMD
> del BiosAc.ffs TxtPeiAp.ffs
> move OpenCore-1.0.5-Darwin-XCODE5-RELEASE\X64\EFI\OC\Drivers\Fat.efi .
> rmdir /s /q OpenCore-1.0.5-Darwin-XCODE5-RELEASE
> GenSec -o Fat.pe32 -s EFI_SECTION_PE32 Fat.efi
> GenSec -o Fat.ui -s EFI_SECTION_USER_INTERFACE -n "Fat"
> GenSec -o Fat.com -s EFI_SECTION_COMPRESSION -c PI_NONE Fat.pe32 Fat.ui

Create the final ffs with this specific GUID: 961578FE-B6B7-44C3-AF35-6BC705CD2B1F
GUID source: https://github.com/acidanthera/audk/blob/master/FatPkg/EnhancedFatDxe/Fat.inf#L18C36-L18C72

> GenFfs -o Fat.ffs -t EFI_FV_FILETYPE_DRIVER -g "961578FE-B6B7-44C3-AF35-6BC705CD2B1F" -s -i Fat.com
> del Fat.com Fat.ui Fat.pe32

Done with the creation of the Fat ffs module!





[Adding HfsPlus driver]

As per OpenCore Configuration document:
"Proprietary HFS file system driver with bless support commonly found in Apple firmware."

Since I'm going to install a hackintosh I need to include the binary HfsPlus from acidanthera/OcBinaryData repository in the EFI folder. As vit9696 explains here (https://github.com/acidanthera/bugtracker/issues/659#issue-548918983)

"Currently we recommend using Apple HfsPlus.efi driver to enable HFS+ file system support for the following tasks:

- Loading DMG recovery images in all operating systems up to 10.15 inclusive.
- Loading macOS on HFS+ up to 10.13 inclusive (I believe there is no legit way to install macOS on HFS+ otherwise).
- Loading macOS installers up to 10.14 or even 10.15 inclusive (they still use HFS+)."



So this driver is still needed, despite Apple is using APFS since macOS 10.14+

I was fed up to include this driver in every EFI partition (whether it's a USB or a hard drive partition), so I decided to add this driver directly in the firmware!
This also allows me to bypass UEFI > ConnectDrivers in OpenCore config!


> GenSec -o HfsPlus.pe32 -s EFI_SECTION_PE32 HfsPlus.efi
> GenSec -o HfsPlus.ui -s EFI_SECTION_USER_INTERFACE -n "HfsPlus"
> GenSec -o HfsPlus.com -s EFI_SECTION_COMPRESSION -c PI_NONE HfsPlus.pe32 HfsPlus.ui

Lastly, create the .ffs module using this specific GUID: "AE4C11C8-1D6C-F24E-A183-E1CA36D1A8A9"
This GUID is used by Apple in the latest Intel Mac firmwares
This is the direct link to find this GUID: https://github.com/LongSoft/UEFITool/blob/A71/common/guids.csv#L8013C1-L8013C37
Otherwise it's included in the EFIPayloads of the official installer

This GUID is also embedded in HfsPlus.efi file!

Open Hextor
File > Open > "HfsPlus.efi" > Open
Search > Find/Replace... > Find: "AE4C11C8-1D6C-F24E-A183-E1CA36D1A8A9" > Text > List > Search pattern found 1 time(s) > OK
Close Find/Replace window
File > Exit

> GenFfs -o HfsPlus.ffs -t EFI_FV_FILETYPE_DRIVER -g "AE4C11C8-1D6C-F24E-A183-E1CA36D1A8A9" -s -i HfsPlus.com
> del HfsPlus.pe32 HfsPlus.ui HfsPlus.com

Done with the creation of the HfsPlus ffs module!





Now we have our mod .ffs files to be replaced/insert into our original file!

Back to CMD
> start /b /min /wait MMTool mod_bios_tmp.fd /r 899407D7-99FE-43D8-9A21-79EC328CAC21 Setup_ACPI_Debug.ffs
> start /b /min /wait MMTool mod_bios_tmp.fd /r 93022F8C-1F09-47EF-BBB2-5814FF609DF5 Fat.ffs
> start /b /min /wait MMTool mod_bios_tmp.fd /r 9221315B-30BB-46B5-813E-1B1BF4712BD3 Defaults_ACPI_Debug.ffs
> start /b /min /wait MMTool mod_bios_tmp.fd /r 821D110C-D0A3-4CF7-AEF3-E28088491704 Updated_512KiB.ffs
> start /b /min /wait MMTool mod_bios_tmp.fd /r B1DA0ADF-4F77-4070-A88E-BFFE1C60529A AMITSE_ACPI_Debug.ffs
> start /b /min /wait MMTool mod_bios_tmp.fd /i AE4C11C8-1D6C-F24E-A183-E1CA36D1A8A9 HfsPlus.ffs 02:01-00
> start /b /min /wait MMTool mod_bios_tmp.fd /r 2D27C618-7DCD-41F5-BB10-21166BE7E143 BiosAc_fix.ffs
> start /b /min /wait MMTool mod_bios_tmp.fd /r D1E59F50-E8C3-4545-BF61-11F002233C97 TxtPeiAp_fix.ffs
> move mod_bios_tmp.fd Z97XUD3H.fd
> del HfsPlus.ffs Fat.ffs TxtPeiAp_fix.ffs BiosAc_fix.ffs Defaults_ACPI_Debug.ffs AMITSE_ACPI_Debug.ffs Setup_ACPI_Debug.ffs Updated_512KiB.ffs
> exit

We have finished editing the BIOS! The last step is to create the report of it

Back to File Explorer

Open UEFITool.exe for the last time
File > Unload GUID database
File > Open image file... > "Z97XUD3H.fd" > Open
File > Generate report... > [default name is fine] > Save
File > Quit

Open MMTool.exe for the last time
Load Image > "Z97XUD3H.fd" > Open
Create Report > OK
Close

We now have 3 files:
1) Z97XUD3H.fd (edited BIOS file)
2) Z97XUD3H.fd.report.txt (UEFITool report)
3) Z97XUD3H.rpt (MMTool report)



Done!!!!!!!
